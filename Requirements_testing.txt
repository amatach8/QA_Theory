
Характеристики хороших требований:

1. Завершенность
   - требование должно содержать всю информацию необходимую для разработчика
2. Однозначность
   - требование должно трактоваться одинаково всеми участниками разработки
3. Корректность и согласованность
   - требование должно четко указывать на то, что должно выполнять приложение
4. Проверяемость
   - должна быт возможность протестировать функционал,составить тест-кейсы
5. Необходимость и полезность при эксплуатации
6. Осуществимость
   - этот показатель оперделяется балансом между ценностью функционала и возможными затратами
7. Модифицируемость
   - возможность изменят требования, что не повлечет за собой изменение другихх требований
8. Прослеживаемость
   - требование должно иметь уникальный идентификатор, по которому будет легко прослеживаться 
9. Упорядочены по важности, срочности и стабильности


Техники тестирования требований :
 
1. Взаимный просмотр:
	- беглый просмотр — автор показывает свою работу коллегам, они в свою очередь дают свои рекомендации, 
	  высказывают свои вопросы и замечания;
	- технический просмотр — выполняется группой специалистов;
	- формальная инспекция — привлекается большое количество специалистов, представляет собой структурированный, 
	  систематизированный и документированный подход. Минус такого варианта — тратится много времени.
2. Вопросы — если возникают вопросы, то можно спрашивать у представителей заказчика, более опытных коллег.

3. Тест-кейсы и чек-листы — хорошее требование должно быть проверяемым, чтобы это определить можно использовать 
   чек-листы или полноценные тест-кейсы. Если можно быстро придумать несколько пунктов чек-листа — это уже хороший знак.  

4. Исследование поведения системы — необходимо мысленно смоделировать процесс работы пользователя с системой, 
   созданной по тестируемым требованиям, после этого определить неоднозначные варианты определения системы.

5. Рисунки — графическое представление дает наглядное представление приложения, на рисунке проще увидеть, что какие-то 
   элементы не стыкуются, где-то чего-то не хватает и т.д.

6. Прототипирование — сделав наброски пользовательского интерфейса, легко оценить применить применение тех или иных 
   пользовательских решений.
   
   
   Основные принципы тестирования требований:
- тестирование требований лучше проводить до старта разработки. Для этого нужно рассчитать необходимое время на проверку 
  и заморозить тестируемую документацию до окончания проверки;
- проводить тестирование требований могут как аналитики, так и тестировщики. Однако, для достижения лучшего результата 
  описание и проверку требований следует поручать разным людям; 
- заведение дефектов по документации ничем не отличается от заведения дефектов по продукту: баги следует заносить в систему 
  баг-трекинга как обычно;
- в том случае, когда проверка требований ведется параллельно с разработкой, крайне желательно предупредить команду 
  разработки о найденных дефектах (чтобы они могли вовремя исправить ошибку);
- уровень детализации требований (как и глубина тестирования) сильно зависит от уровня проекта. Нет смысла проверять время 
  реакции на кнопку на проекте, который только запустился (если это, конечно, не относится к ключевому функционалу).
  
  

