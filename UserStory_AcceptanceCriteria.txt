     User Stories
  
     Пользовательская история — это описание функциональной возможности ПО простыми, общими словами, составленное 
с точки зрения конечного пользователя или клиента.
  
     Пользовательские истории состоят из нескольких предложений, описывающих требуемый результат простым языком и 
в общих чертах. Они не содержат мелочей. Требования появятся позже, когда команда обсудит их и придет к согласию.
  
     Пользовательские истории также составляют более крупные элементы методик agile, такие как эпики и инициативы. 
     Эпики — это крупные рабочие задачи, которые делятся на несколько историй. Группа эпиков образует инициативы. 
Благодаря этим крупным структурам команда разработчиков выполняют свою повседневную работу (над историями) так, 
что это ведет к достижению целей организации, выраженных в эпиках и инициативах.
  
     Текст самой user story должен объяснять роль/действия юзера в системе, его потребность и профит, который юзер 
получит после того как история случится.
     К примеру: Как, <роль/персонаж юзера>, я <что-то хочу получить>, <с такой-то целью> .
 Есть один actor.
 Есть одно действие.
 Есть одна ценность / value / impact. 

  1. Actor
C актером все более-менее просто. Вы выделили персоны, или у вас есть роли, и вы легко их вписываете в начало истории. 
Есть одна проблема. Убери часть истории про актера. Если история ничего при этом не потеряла — значит эта часть 
бесполезна. Вы определили роли в Системе и поняли что их не очень много — Пользователь, Оператор и Админ. И креативите 
по 100 историй, которые начинаются как “Как Пользователь Я …”. У вас закрываются несколько спринтов, истории которых 
начинаются одинаково. Зачем вам это нужно? Да, это бесполезно.
Джеф Паттон предлагает следующее:
Разделите всех актеров на группы. Целевая группа, важная группа, менее важная группа и тп.
Дайте уникальные названия актерам в этих группах. Даже если в системе у них будет одинаковые роли “Пользователя системы”
Пишите истории с точки зрения этих актеров указывая их уникальные названия.
В результате вы сможете визуально увидеть какие истории необходимы для актеров целевой группы, какие — для каждой группы и тп. 
Вы не просто можете использовать это при разборе истории и выстраивания анализа вокруг указанного актера. Вы сможете более 
правильно выстроить приоритет, так как истории актеров целевой группы для нас более важны.

  2. Действие
Наверное здесь сложно ошибиться — это суть истории, “что нужно сделать”. Что можно улучшить. Действие должно быть 
одно — основное. Нет смысла описывать “авторизуется и выполняется поиск” или “указывает параметры поиска и выполняет 
поиск”. Укажите то действие, что вам действительно нужно. Важно описывать историю на уровне “ЧТО?” делает, а не “КАК?” 
Это главное в истории. Опишите проблему, а не ее решение. Лучше вы потом с командой это обсудите и найдете более 
оптимальное “КАК”-решение.

  3. Ценность
Главная проблема с User Story. Вы всегда знаете первую часть истории, но всегда сложно указать для чего это делается. 
Но это Scrum, все должно быть указано как User story согласно шаблону, и потому вы пишите “чтобы …” и какую-то чушь, 
в которую сами не верите.Уберите эту часть из истории. Если ничего не потеряли — значит формализация ценности в истории 
была бесполезна. Что же можно сделать? Отказаться от формулировки “чтобы”. Это корень зла. ДА, для каких-то историй 
можно указать ценность истории в таком формате, но не для большинства.
Перейти с понятия ценности (value) на влияние (impact). Ваша история не обязательна должна иметь ценность, но обязательно 
должна оказывать влияние на кого актера, что указан в истории. А уже это влияние ведет в конечном итоге к цели, которая 
имеет для вас ценность.


    INVEST–критерии в User Story 
У юзер стори есть некоторые особенности. INVEST–критерии помогают понять, будет ли конкретная история хорошей, или над 
ней лучше поработать. Изначально лучше писать такие истории, которые будут подходить под INVEST–критерии. 

    I — Independent. Независимость истории означает, что на неё не влияют другие истории. На практике этого 
	часто сложно добиться, поэтому просто более подходящими обычно принято считать те истории, в которых 
        таких зависимостей меньше. Это значит, что к концу итерации/спринта у нас точно будет готовый функционал, 
	а не «зависнувший в воздухе» и не готовый к использованию. 

    N — Negotiable. История должна побуждать обсуждения, и эти обсуждения должны вестись, когда создается история. 
	Этот принцип довольно легко запомнить по самому названию — пользовательская история это именно ИСТОРИЯ. 
	Это то, что обсуждается, о чем разговаривают. Это также значит, что в истории не должно быть много излишних 
	деталей. В соответствии с agile здесь мы считаем, что излишняя документация только замедляет процесс, и юзер 
	стори призваны решить эту проблему своей краткостью. 

    V — Valuable. История должна быть ценной, функционал должен приносить бизнес–ценность. Здесь и добавить нечего. 

    E — Estimable. История должна быть доступна для оценки. Человек или группа, которая будет работать над реализацией 
	истории, должна иметь возможность её оценить. Если оценку дать невозможно, то историю во–первых нельзя 
	спланировать, а во–вторых непонятно, будет ли она реализована или нет. На самом деле любая история доступна 
	для оценки. Если нет — скорее всего, она просто сформулирована некорректно, и тогда можно её переформулировать. 
	Например, «Улучшить сайт» — плохая история, непонятно, что нужно сделать, и непонятно, как эту историю оценить. 
	Если эту историю конкретизировать — описать, что конкретно нужно улучшить — история может обрести смысл и 
	доступность для оценки. 

    S — Small. История должна быть достаточно небольшой, чтобы её можно было бы реализовать в течение короткой итерации, 
	спринта. Если история большая — её есть смысл декомпозировать на более короткие, чтобы было что взять на работу 
	в итерацию. 

    T — Testable. Юзер стори должна быть доступна для тестирования.



     Практические советы по написанию пользовательских историй:

- Лучше написать много историй поменьше, чем несколько громоздких.
- Каждая история в идеале должна быть написана избегая технического жаргона — чтобы клиент мог приоритезировать истории и 
  включать их в итерации.
- Истории должны быть написаны таким образом, чтобы их можно было протестировать.
- Тесты должны быть написаны до кода.
- Как можно дольше стоит избегать UI. История должна выполняться без привязки к конкретным элементам.
- Каждая история должна содержать оценку.
- История должна иметь концовку — т.е. приводить к конкретному результату.
- История должна вмещаться в итерацию.


     Acceptance Criteria

     Acceptance Criteria («критерии приема работы») — это условия, которые позволяют вам определить, когда ваша 
пользовательская история (User Story) завершена и обладает всеми функциями, необходимыми для удовлетворения 
потребностей вашего пользователя, вашего клиента.

     Если пользовательскую историю создают как некую формулировку намерения, чтобы команда была свободна в поиске 
решения, то критерии приемки — это точные детали, уникальные для каждой User Story, набор условий, подтверждающий, 
что она реализована.

     Критерии приемки всегда можно проверить по четкому параметру «да/нет». Нельзя выполнить какой-то критерий 
наполовину: он либо выполнен, либо нет. Благодаря Acceptance Criteria команда разработки знает, как должен выглядеть 
готовый результат конкретного требования.


     В целом Acceptance Criteria должны соответствовать следующим характеристикам:

Бинарные: могут иметь только два уникальных результата — успех или отказ. 
          Не может быть термина «частичный успех», потому что критерий приемки всегда должен давать «зеленый» 
		  или «красный».
Однозначные: их можно интерпретировать только одним способом. Неправильно прописывать: «Форма окрашена в яркий цвет» 
          или «Система должна быть user friendly», ведь такие критерии можно интерпретировать по-разному.
Подтверждаемые: должны быть написаны так, чтобы клиент мог быстро их проверить.
Полные: список критериев должен включать все функциональные требования. Все, что нужно сделать по каждому требованию, 
          описывают в критериях приемки.
		  
    Шаблон:  
         Учитывая [контекст], когда [выполняется конкретное действие], тогда [должно произойти следствие]

Разберем этот шаблон на примере пользовательской истории: 
         «Как писатель, я хочу получать уведомления, когда другие добавляют комментарии, чтобы я был в курсе». 
Вот три примера Acceptance Criteria для вышеупомянутой пользовательской истории: 
         - Поскольку у меня не открыто приложение, когда мой телефон заблокирован, я должен получить уведомление в виде 
	   баннера. 
         - Поскольку у меня есть открытое приложение, когда я пишу в документе, значок колокольчика должен обновиться, 
	   чтобы показать непрочитанные уведомления с количеством. 
	 - Если пользователь был упомянут в комментарии с помощью @ упоминания, когда упомянутый пользователь читает 
	   комментарии, то в той же цепочке комментариев должно появиться флэш сообщение о новом комментарии. 
Рекомендуется добавлять все Acceptance Criteria в качестве описания к пользовательской истории. Тогда, когда члены вашей 
команды возьмут User Story, они получат полную картину того, что требуется для завершения.


Примеры требований и Acceptance Criteria к ним:

 1. Требование — разрешить пользователю загружать файл с картинкой. Критерии приемки:

     доступны определенные форматы файлов, например, jpeg, png, gif;
     после загрузки появляется сообщение, что файл успешно загрузился.
 2. Требование — разрешить пользователю менять пароль. Критерии приемки:

     новый пароль имеет не меньше 8 символов;
     новый пароль не может дублировать старый;
     пароль не может начинаться и заканчиваться пробелом.
     
 Перечисленные атрибуты должны быть выполнены для конкретных требований, они не описывают весь процесс.
